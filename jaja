package com.example.sensors_app;

import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.Service;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.os.Build;
import android.os.Handler;
import android.os.IBinder;
import android.provider.CalendarContract;
import android.util.Log;
import androidx.annotation.NonNull;
import androidx.core.app.NotificationCompat;
import androidx.core.content.ContextCompat;

public class CalendarService extends Service {

    private static final String TAG = "CalendarService";
    public static final String CHANNEL_ID = "CalendarServiceChannel";
    private Handler handler = new Handler();
    private Runnable stopRunnable;

    @Override
    public void onCreate() {
        super.onCreate();
        Log.d(TAG, "CalendarService Created");

        // Create a notification and start the service in the foreground
        createNotificationChannel();
        Notification notification = new NotificationCompat.Builder(this, CHANNEL_ID)
                .setContentTitle("Calendar Service Running")
                .setContentText("Accessing calendar in the background")
                .setSmallIcon(android.R.drawable.ic_menu_info_details)
                .build();

        startForeground(8, notification);

        // Check for calendar permission and read calendar events
        if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.READ_CALENDAR) == PackageManager.PERMISSION_GRANTED) {
            readCalendarEvents();
        } else {
            Log.d(TAG, "Calendar permission not granted");
        }
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        Log.d(TAG, "CalendarService Started");

        // Get duration and schedule stop
        int duration = intent.getIntExtra("DURATION", 0);
        scheduleStop(duration);

        return START_STICKY;
    }

    private void readCalendarEvents() {
        Log.d(TAG, "Reading calendar events...");

        // Query the Calendar content provider for events
        Cursor cursor = getContentResolver().query(CalendarContract.Events.CONTENT_URI,
                new String[]{CalendarContract.Events._ID, CalendarContract.Events.TITLE, CalendarContract.Events.DTSTART},
                null, null, null);

        if (cursor != null && cursor.getCount() > 0) {
            while (cursor.moveToNext()) {
                String eventId = cursor.getString(cursor.getColumnIndex(CalendarContract.Events._ID));
                String eventTitle = cursor.getString(cursor.getColumnIndex(CalendarContract.Events.TITLE));
                long eventStart = cursor.getLong(cursor.getColumnIndex(CalendarContract.Events.DTSTART));

                // Log or store the event details
                Log.d(TAG, "Event ID: " + eventId + ", Title: " + eventTitle + ", Start Time: " + eventStart);
            }
            cursor.close();
        } else {
            Log.d(TAG, "No calendar events found");
        }
    }

    private void scheduleStop(int duration) {
        if (stopRunnable != null) {
            handler.removeCallbacks(stopRunnable);
        }
        stopRunnable = () -> stopSelf();
        handler.postDelayed(stopRunnable, duration * 1000); // Convert duration to milliseconds
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        Log.d(TAG, "CalendarService Destroyed");
    }

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    private void createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            NotificationChannel serviceChannel = new NotificationChannel(
                    CHANNEL_ID,
                    "Calendar Service Channel",
                    NotificationManager.IMPORTANCE_DEFAULT
            );
            NotificationManager manager = getSystemService(NotificationManager.class);
            if (manager != null) {
                manager.createNotificationChannel(serviceChannel);
            }
        }
    }
}







package com.example.sensors_app;

import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.wifi.ScanResult;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Handler;
import android.os.IBinder;
import android.util.Log;
import androidx.annotation.NonNull;
import androidx.core.app.NotificationCompat;
import androidx.core.content.ContextCompat;

import java.util.List;

public class WifiService extends Service {

    private static final String TAG = "WifiService";
    public static final String CHANNEL_ID = "WifiServiceChannel";
    private WifiManager wifiManager;
    private Handler handler = new Handler();
    private Runnable stopRunnable;

    @Override
    public void onCreate() {
        super.onCreate();
        Log.d(TAG, "WifiService Created");

        // Create a notification and start the service in the foreground
        createNotificationChannel();
        Notification notification = new NotificationCompat.Builder(this, CHANNEL_ID)
                .setContentTitle("Wi-Fi Scanning Service Running")
                .setContentText("Scanning for nearby Wi-Fi devices")
                .setSmallIcon(android.R.drawable.ic_menu_info_details)
                .build();

        startForeground(9, notification);

        wifiManager = (WifiManager) getApplicationContext().getSystemService(Context.WIFI_SERVICE);

        // Check for necessary permissions and start Wi-Fi scan
        if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED &&
            ContextCompat.checkSelfPermission(this, android.Manifest.permission.NEARBY_WIFI_DEVICES) == PackageManager.PERMISSION_GRANTED) {

            scanNearbyWifiDevices();
        } else {
            Log.d(TAG, "Necessary permissions not granted");
        }
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        Log.d(TAG, "WifiService Started");

        // Get duration and schedule stop
        int duration = intent.getIntExtra("DURATION", 0);
        scheduleStop(duration);

        return START_STICKY;
    }

    private void scanNearbyWifiDevices() {
        Log.d(TAG, "Scanning nearby Wi-Fi devices...");

        // Ensure Wi-Fi is enabled
        if (!wifiManager.isWifiEnabled()) {
            wifiManager.setWifiEnabled(true);
        }

        // Start Wi-Fi scan
        boolean success = wifiManager.startScan();
        if (success) {
            List<ScanResult> scanResults = wifiManager.getScanResults();
            for (ScanResult scanResult : scanResults) {
                String ssid = scanResult.SSID;
                String bssid = scanResult.BSSID;
                int level = scanResult.level; // Signal strength in dBm
                Log.d(TAG, "Found Wi-Fi device: SSID=" + ssid + ", BSSID=" + bssid + ", Signal Strength=" + level + " dBm");
            }
        } else {
            Log.d(TAG, "Wi-Fi scan failed");
        }
    }

    private void scheduleStop(int duration) {
        if (stopRunnable != null) {
            handler.removeCallbacks(stopRunnable);
        }
        stopRunnable = () -> stopSelf();
        handler.postDelayed(stopRunnable, duration * 1000); // Convert duration to milliseconds
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        Log.d(TAG, "WifiService Destroyed");
    }

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    private void createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            NotificationChannel serviceChannel = new NotificationChannel(
                    CHANNEL_ID,
                    "Wi-Fi Scanning Service Channel",
                    NotificationManager.IMPORTANCE_DEFAULT
            );
            NotificationManager manager = getSystemService(NotificationManager.class);
            if (manager != null) {
                manager.createNotificationChannel(serviceChannel);
            }
        }
    }
}



<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
<uses-permission android:name="android.permission.CHANGE_WIFI_STATE" />
<uses-permission android:name="android.permission.NEARBY_WIFI_DEVICES" />
<uses-permission android:name="android.permission.FOREGROUND_SERVICE_NEARBY_WIFI_DEVICES" />