    public void schedulePreprocessingWorker() {
        
                Constraints constraints = new Constraints.Builder()
                        //.setRequiresCharging(true)
                        .setRequiresBatteryNotLow(false)
                        .setRequiresDeviceIdle(false)
                        .build();

                // logic for exactly at 9AM everyday
                Calendar currentDate=Calendar.getInstance();

                Calendar dueDate=Calendar.getInstance();

                dueDate.set(Calendar.HOUR_OF_DAY,10);
                dueDate.set(Calendar.MINUTE,35);
                dueDate.set(Calendar.SECOND,0);

                if (dueDate.before(currentDate)){
                    dueDate.add(Calendar.HOUR_OF_DAY,24);
                }

                long initialDelay=dueDate.getTimeInMillis()-currentDate.getTimeInMillis();

                PeriodicWorkRequest periodicWorkRequest=new PeriodicWorkRequest.Builder(
                        PreprocessingWorker.class,24, TimeUnit.HOURS)
                        .setInitialDelay(initialDelay,TimeUnit.MILLISECONDS)
                        .setConstraints(constraints)
                        .build();

                WorkManager workManager=WorkManager.getInstance(this);
                
                // Define the existing periodic work policy
                ExistingPeriodicWorkPolicy existingPeriodicWorkPolicy = ExistingPeriodicWorkPolicy.REPLACE;

                workManager.enqueueUniquePeriodicWork(
                        "PeriodicWork",
                        existingPeriodicWorkPolicy,
                        periodicWorkRequest
                );

                workManager.getWorkInfosForUniqueWorkLiveData("PeriodicWork")
                .observe(this, workInfos -> {
                    if (workInfos!=null && !workInfos.isEmpty()){
                        WorkInfo workInfo=workInfos.get(0);
                        if (workInfo.getState()==WorkInfo.State.SUCCEEDED){
                            markDate();
                            Log.i("CODE-FLOW","Worker Manager Started - ✅");

                        }else {
                            Log.i("CODE-FLOW","Worker Manager Started - ✅");
                        }
                    }
                    Date currentTime = Calendar.getInstance().getTime();
                    SimpleDateFormat timeFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
                    String formattedTime = timeFormat.format(currentTime);


                    SimpleDateFormat sdf = new SimpleDateFormat("dd MMM yyyy");                    // Get the current date
                    Date date = new Date();
                    // Format the date
                    String formattedDate = sdf.format(date.toString());

                    // Print the formatted date
                    //System.out.println(formattedDate);
                    TextView log_txt=findViewById(R.id.periodic_request_logs_textView);
                    log_txt.setText("* Last preprocessed at " + " " + formattedTime);
                    Log.i("WORKER_NOTI","* Last preprocessed at " + " " + formattedTime);

                });

                Log.i("CODE-FLOW","Worker Manager Started - ✅");

    }
