#------------------------ This is plot 1 --------------------------------------------------------

# adding recently used column 
data['recentlyUsedTime']=data['timeStamp']-data['lastTimeUsed']
data['recentlyUsedTime']


columns_to_analyze = ['recentlyUsedTime']
data_filtered = data[columns_to_analyze].copy()

# Calculate z-scores for the selected features
z_scores = data_filtered.apply(zscore)

# print(z_scores)

# Add the packageName to the z_scores dataframe for grouping in the plots
z_scores['uid'] = data['uid']

# print(z_scores)

# Melt the dataframe for easier plotting with seaborn
z_scores_melted = z_scores.melt(id_vars=['uid'], var_name='Feature', value_name='Z-Score')

# print(z_scores_melted)
# Bar plot of z-scores with respect to each packageName
plt.figure(figsize=(14, 8))
sns.barplot(x='uid', y='Z-Score', hue='Feature', data=z_scores_melted, errorbar=None)
plt.axhline(y=2, color='r', linestyle='--', label='Threshold')
plt.axhline(y=-2, color='r', linestyle='--')
plt.title('Z-Scores of Recently used time by Package Name (Threshold = 2)')
plt.xticks(rotation=270)
plt.legend(loc='upper right')
plt.show()


#------------------------ This is plot 2--------------------------------------------------------

# Z-scores for sensor count data
# Select relevant columns for analysis

columns_to_analyze = ['totalUsage', 'totalUsageDaily', 'totalUsageDaily']
data_filtered = data[columns_to_analyze].copy()

# Calculate z-scores for the selected features
z_scores = data_filtered.apply(zscore)

# print(z_scores)

# Add the packageName to the z_scores dataframe for grouping in the plots
z_scores['uid'] = data['uid']

# print(z_scores)

# Melt the dataframe for easier plotting with seaborn
z_scores_melted = z_scores.melt(id_vars=['uid'], var_name='Feature', value_name='Z-Score')

# print(z_scores_melted)
# Bar plot of z-scores with respect to each packageName
plt.figure(figsize=(14, 8))
sns.barplot(x='uid', y='Z-Score', hue='Feature', data=z_scores_melted, errorbar=None)
plt.axhline(y=2, color='r', linestyle='--', label='Threshold')
plt.axhline(y=-2, color='r', linestyle='--')
plt.title('Z-Scores of Usage Count by Package Name (Threshold = 2)')
plt.xticks(rotation=270)
plt.legend(loc='upper right')
plt.show()


as you see both plots are having same x axis and y axis , now i want to get the plot such that plot 1 vs plot 2 


ans :

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from scipy.stats import zscore

# Assuming 'data' is already loaded and contains the relevant columns
# Calculate z-scores for recentlyUsedTime
data['recentlyUsedTime'] = data['timeStamp'] - data['lastTimeUsed']
columns_to_analyze_1 = ['recentlyUsedTime']
data_filtered_1 = data[columns_to_analyze_1].copy()
z_scores_1 = data_filtered_1.apply(zscore)
z_scores_1['uid'] = data['uid']
z_scores_1_melted = z_scores_1.melt(id_vars=['uid'], var_name='Feature', value_name='Z-Score')

# Calculate z-scores for usage metrics
columns_to_analyze_2 = ['totalUsage', 'totalUsageDaily']
data_filtered_2 = data[columns_to_analyze_2].copy()
z_scores_2 = data_filtered_2.apply(zscore)
z_scores_2['uid'] = data['uid']
z_scores_2_melted = z_scores_2.melt(id_vars=['uid'], var_name='Feature', value_name='Z-Score')

# Merge the two melted dataframes on 'uid'
merged_z_scores = pd.merge(z_scores_1_melted, z_scores_2_melted, on='uid', suffixes=('_recentlyUsed', '_usage'))

# Scatter plot comparing Z-Scores of recently used time and usage metrics
plt.figure(figsize=(14, 8))
sns.scatterplot(data=merged_z_scores, x='Z-Score_recentlyUsed', y='Z-Score_usage', hue='Feature_usage')
plt.axhline(y=2, color='r', linestyle='--', label='Threshold')
plt.axhline(y=-2, color='r', linestyle='--')
plt.axvline(x=2, color='r', linestyle='--')
plt.axvline(x=-2, color='r', linestyle='--')
plt.title('Comparison of Z-Scores: Recently Used Time vs Usage Metrics')
plt.legend(loc='upper right')
plt.show()



import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from scipy.stats import zscore

# Assuming 'data' is already loaded and contains the relevant columns
# Calculate z-scores for recentlyUsedTime
data['recentlyUsedTime'] = data['timeStamp'] - data['lastTimeUsed']
columns_to_analyze_1 = ['recentlyUsedTime']
data_filtered_1 = data[columns_to_analyze_1].copy()
z_scores_1 = data_filtered_1.apply(zscore)
z_scores_1['uid'] = data['uid']
z_scores_1_melted = z_scores_1.melt(id_vars=['uid'], var_name='Feature', value_name='Z-Score')

# Calculate z-scores for usage metrics
columns_to_analyze_2 = ['totalUsage', 'totalUsageDaily']
data_filtered_2 = data[columns_to_analyze_2].copy()
z_scores_2 = data_filtered_2.apply(zscore)
z_scores_2['uid'] = data['uid']
z_scores_2_melted = z_scores_2.melt(id_vars=['uid'], var_name='Feature', value_name='Z-Score')

# Create subplots
fig, axes = plt.subplots(2, 1, figsize=(14, 16), sharex=True)

# Plot 1: Z-Scores of Recently used time by Package Name
sns.barplot(x='uid', y='Z-Score', hue='Feature', data=z_scores_1_melted, ax=axes[0], errorbar=None)
axes[0].axhline(y=2, color='r', linestyle='--', label='Threshold')
axes[0].axhline(y=-2, color='r', linestyle='--')
axes[0].set_title('Z-Scores of Recently Used Time by Package Name (Threshold = 2)')
axes[0].legend(loc='upper right')
axes[0].tick_params(axis='x', rotation=270)

# Plot 2: Z-Scores of Usage Count by Package Name
sns.barplot(x='uid', y='Z-Score', hue='Feature', data=z_scores_2_melted, ax=axes[1], errorbar=None)
axes[1].axhline(y=2, color='r', linestyle='--', label='Threshold')
axes[1].axhline(y=-2, color='r', linestyle='--')
axes[1].set_title('Z-Scores of Usage Count by Package Name (Threshold = 2)')
axes[1].legend(loc='upper right')
axes[1].tick_params(axis='x', rotation=270)

plt.show()


jay
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from scipy.stats import zscore

# Assuming 'data' is already loaded and contains the relevant columns
# Calculate z-scores for recentlyUsedTime
data['recentlyUsedTime'] = data['timeStamp'] - data['lastTimeUsed']
columns_to_analyze_1 = ['recentlyUsedTime']
data_filtered_1 = data[columns_to_analyze_1].copy()
z_scores_1 = data_filtered_1.apply(zscore)
z_scores_1['uid'] = data['uid']
z_scores_1_melted = z_scores_1.melt(id_vars=['uid'], var_name='Feature', value_name='Z-Score')

# Calculate z-scores for usage metrics
columns_to_analyze_2 = ['totalUsage', 'totalUsageDaily']
data_filtered_2 = data[columns_to_analyze_2].copy()
z_scores_2 = data_filtered_2.apply(zscore)
z_scores_2['uid'] = data['uid']
z_scores_2_melted = z_scores_2.melt(id_vars=['uid'], var_name='Feature', value_name='Z-Score')

# Create subplots
fig, axes = plt.subplots(2, 1, figsize=(14, 16), sharex=True)

# Plot 1: Z-Scores of Recently used time by Package Name (Bar Plot)
sns.barplot(x='uid', y='Z-Score', hue='Feature', data=z_scores_1_melted, ax=axes[0], errorbar=None)
axes[0].axhline(y=2, color='r', linestyle='--', label='Threshold')
axes[0].axhline(y=-2, color='r', linestyle='--')
axes[0].set_title('Z-Scores of Recently Used Time by Package Name (Threshold = 2)')
axes[0].legend(loc='upper right')
axes[0].tick_params(axis='x', rotation=270)

# Plot 2: Z-Scores of Usage Count by Package Name (Line Plot)
for feature in z_scores_2_melted['Feature'].unique():
    subset = z_scores_2_melted[z_scores_2_melted['Feature'] == feature]
    sns.lineplot(x='uid', y='Z-Score', data=subset, label=feature, ax=axes[1])
axes[1].axhline(y=2, color='r', linestyle='--', label='Threshold')
axes[1].axhline(y=-2, color='r', linestyle='--')
axes[1].set_title('Z-Scores of Usage Count by Package Name (Threshold = 2)')
axes[1].legend(loc='upper right')
axes[1].tick_params(axis='x', rotation=270)

plt.show()


import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from scipy.stats import zscore

# Sample data setup
# data = pd.read_csv('your_data.csv')  # Ensure your data is loaded here

# Calculate z-scores for recentlyUsedTime
data['recentlyUsedTime'] = data['timeStamp'] - data['lastTimeUsed']
columns_to_analyze_1 = ['recentlyUsedTime']
data_filtered_1 = data[columns_to_analyze_1].copy()
z_scores_1 = data_filtered_1.apply(zscore)
z_scores_1['uid'] = data['uid']
z_scores_1_melted = z_scores_1.melt(id_vars=['uid'], var_name='Feature', value_name='Z-Score')

# Calculate z-scores for usage metrics
columns_to_analyze_2 = ['totalUsage', 'totalUsageDaily']
data_filtered_2 = data[columns_to_analyze_2].copy()
z_scores_2 = data_filtered_2.apply(zscore)
z_scores_2['uid'] = data['uid']
z_scores_2_melted = z_scores_2.melt(id_vars=['uid'], var_name='Feature', value_name='Z-Score')

# Merge the two melted dataframes on 'uid'
merged_z_scores = pd.merge(z_scores_1_melted, z_scores_2_melted, on='uid', suffixes=('_recentlyUsed', '_usage'))

# Create the plot
plt.figure(figsize=(14, 8))

# Bar plot for recentlyUsedTime
sns.barplot(x='uid', y='Z-Score_recentlyUsed', hue='Feature_recentlyUsed', data=merged_z_scores, dodge=True, alpha=0.7)

# Line plot for usage metrics
for feature in z_scores_2_melted['Feature'].unique():
    subset = z_scores_2_melted[z_scores_2_melted['Feature'] == feature]
    sns.lineplot(x='uid', y='Z-Score', data=subset, label=feature, marker='o')

plt.axhline(y=2, color='r', linestyle='--', label='Threshold')
plt.axhline(y=-2, color='r', linestyle='--')
plt.title('Combined Z-Scores of Recently Used Time and Usage Metrics by Package Name (Threshold = 2)')
plt.xticks(rotation=270)
plt.legend(loc='upper right')
plt.show()



import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from scipy.stats import zscore

# Sample data setup
# data = pd.read_csv('your_data.csv')  # Ensure your data is loaded here

# Calculate z-scores for recentlyUsedTime
data['recentlyUsedTime'] = data['timeStamp'] - data['lastTimeUsed']
columns_to_analyze_1 = ['recentlyUsedTime']
data_filtered_1 = data[columns_to_analyze_1].copy()
z_scores_1 = data_filtered_1.apply(zscore)
z_scores_1['uid'] = data['uid']
z_scores_1_melted = z_scores_1.melt(id_vars=['uid'], var_name='Feature', value_name='Z-Score')

# Calculate z-scores for usage metrics
columns_to_analyze_2 = ['totalUsage', 'totalUsageDaily']
data_filtered_2 = data[columns_to_analyze_2].copy()
z_scores_2 = data_filtered_2.apply(zscore)
z_scores_2['uid'] = data['uid']
z_scores_2_melted = z_scores_2.melt(id_vars=['uid'], var_name='Feature', value_name='Z-Score')

# Create the plot with dual y-axes
fig, ax1 = plt.subplots(figsize=(14, 8))

# Bar plot on the first y-axis
sns.barplot(x='uid', y='Z-Score', hue='Feature', data=z_scores_1_melted, ax=ax1, errorbar=None, alpha=0.7)
ax1.axhline(y=2, color='r', linestyle='--', label='Threshold')
ax1.axhline(y=-2, color='r', linestyle='--')
ax1.set_ylabel('Z-Score Recently Used Time')
ax1.tick_params(axis='x', rotation=270)

# Create a second y-axis
ax2 = ax1.twinx()

# Line plot on the second y-axis
for feature in z_scores_2_melted['Feature'].unique():
    subset = z_scores_2_melted[z_scores_2_melted['Feature'] == feature]
    sns.lineplot(x='uid', y='Z-Score', data=subset, ax=ax2, label=feature, marker='o')

ax2.set_ylabel('Z-Score Usage Metrics')

# Combine legends
handles1, labels1 = ax1.get_legend_handles_labels()
handles2, labels2 = ax2.get_legend_handles_labels()
ax2.legend(handles1 + handles2, labels1 + labels2, loc='upper right')

plt.title('Combined Z-Scores of Recently Used Time and Usage Metrics by Package Name (Threshold = 2)')
plt.show()



import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from scipy.stats import zscore

# Sample data setup
# data = pd.read_csv('your_data.csv')  # Ensure your data is loaded here

# Calculate z-scores for recentlyUsedTime
data['recentlyUsedTime'] = data['timeStamp'] - data['lastTimeUsed']
columns_to_analyze_1 = ['recentlyUsedTime']
data_filtered_1 = data[columns_to_analyze_1].copy()
z_scores_1 = data_filtered_1.apply(zscore)
z_scores_1['uid'] = data['uid']
z_scores_1_melted = z_scores_1.melt(id_vars=['uid'], var_name='Feature', value_name='Z-Score')

# Calculate z-scores for usage metrics
columns_to_analyze_2 = ['totalUsage', 'totalUsageDaily']
data_filtered_2 = data[columns_to_analyze_2].copy()
z_scores_2 = data_filtered_2.apply(zscore)
z_scores_2['uid'] = data['uid']
z_scores_2_melted = z_scores_2.melt(id_vars=['uid'], var_name='Feature', value_name='Z-Score')

# Combine data for facet grid
combined_z_scores = pd.concat([z_scores_1_melted, z_scores_2_melted], keys=['RecentlyUsed', 'UsageMetrics'], names=['Category'])
combined_z_scores = combined_z_scores.reset_index(level='Category').reset_index(drop=True)

# Create the facet grid plot
g = sns.FacetGrid(combined_z_scores, col='Category', sharex=True, sharey=False, height=6, aspect=2)

# Bar plot for recently used time
g.map_dataframe(sns.barplot, x='uid', y='Z-Score', hue='Feature', errorbar=None, alpha=0.7, order=z_scores_1['uid'].unique())

# Line plot for usage metrics
for feature in z_scores_2_melted['Feature'].unique():
    subset = combined_z_scores[(combined_z_scores['Feature'] == feature) & (combined_z_scores['Category'] == 'UsageMetrics')]
    g.map_dataframe(sns.lineplot, x='uid', y='Z-Score', data=subset, marker='o')

g.set_xticklabels(rotation=270)
g.add_legend()
plt.show()