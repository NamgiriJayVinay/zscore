public static String getFormattedDateString(String input) {
        // Define the pattern for extracting date and time in the format "dd-MM-yyyy HH:mm:ss"
        String dateTimePattern = "\\b\\d{2}-\\d{2}-\\d{4} \\d{2}:\\d{2}:\\d{2}\\b";
        
        // Compile the pattern and find it in the input string
        Pattern pattern = Pattern.compile(dateTimePattern);
        Matcher matcher = pattern.matcher(input);
        
        // If a match is found, extract the date and time substring
        if (matcher.find()) {
            String dateTimeStr = matcher.group();

            // Define the original and desired formats
            SimpleDateFormat originalFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
            SimpleDateFormat todayFormat = new SimpleDateFormat("'Today at' HH : mm");
            SimpleDateFormat yesterdayFormat = new SimpleDateFormat("'Yesterday at' HH : mm");
            SimpleDateFormat generalFormat = new SimpleDateFormat("dd MMM yyyy 'at' HH : mm");

            try {
                // Parse the extracted date string into a Date object
                Date date = originalFormat.parse(dateTimeStr);

                // Get today's and yesterday's dates for comparison
                Calendar calendar = Calendar.getInstance();
                Date today = calendar.getTime();

                calendar.add(Calendar.DATE, -1);
                Date yesterday = calendar.getTime();

                // Determine and return the appropriate formatted string
                if (isSameDay(date, today)) {
                    return todayFormat.format(date); // Format as "Today at HH : mm"
                } else if (isSameDay(date, yesterday)) {
                    return yesterdayFormat.format(date); // Format as "Yesterday at HH : mm"
                } else {
                    return generalFormat.format(date); // Format as "dd MMM yyyy at HH : mm"
                }
            } catch (ParseException e) {
                e.printStackTrace();
                return "Invalid date format"; // Return an error message if parsing fails
            }
        } else {
            return "Date not found"; // If no matching date pattern is found
        }
    }

    // Helper method to check if two dates fall on the same day
    private static boolean isSameDay(Date date1, Date date2) {
        Calendar cal1 = Calendar.getInstance();
        cal1.setTime(date1);
        Calendar cal2 = Calendar.getInstance();
        cal2.setTime(date2);

        return cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&
               cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR);
    }







///////////////////=============================
// Method to get formatted date string based on input date
    public static String getFormattedDateString(String input) {
        // Extract the date and time substring from the input string
        String dateTimeStr = input.substring(input.indexOf("Date of detection") + 18).trim();

        // Define the original format of the input date and the desired formats
        SimpleDateFormat originalFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
        SimpleDateFormat todayFormat = new SimpleDateFormat("'Today at' HH : mm");
        SimpleDateFormat yesterdayFormat = new SimpleDateFormat("'Yesterday at' HH : mm");
        SimpleDateFormat generalFormat = new SimpleDateFormat("dd MMM yyyy 'at' HH : mm");

        try {
            // Parse the extracted date string into a Date object
            Date date = originalFormat.parse(dateTimeStr);

            // Get today's and yesterday's dates for comparison
            Calendar calendar = Calendar.getInstance();
            Date today = calendar.getTime();

            calendar.add(Calendar.DATE, -1);
            Date yesterday = calendar.getTime();

            // Determine and return the appropriate formatted string
            if (isSameDay(date, today)) {
                return todayFormat.format(date); // Format as "Today at HH : mm"
            } else if (isSameDay(date, yesterday)) {
                return yesterdayFormat.format(date); // Format as "Yesterday at HH : mm"
            } else {
                return generalFormat.format(date); // Format as "dd MMM yyyy at HH : mm"
            }
        } catch (ParseException e) {
            e.printStackTrace();
            return "Invalid date format"; // Return an error message if parsing fails
        }
    }

    // Helper method to check if two dates fall on the same day
    private static boolean isSameDay(Date date1, Date date2) {
        Calendar cal1 = Calendar.getInstance();
        cal1.setTime(date1);
        Calendar cal2 = Calendar.getInstance();
        cal2.setTime(date2);

        return cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&
               cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR);
    }


















#------------------------ This is plot 1 --------------------------------------------------------

# adding recently used column 
data['recentlyUsedTime']=data['timeStamp']-data['lastTimeUsed']
data['recentlyUsedTime']


columns_to_analyze = ['recentlyUsedTime']
data_filtered = data[columns_to_analyze].copy()

# Calculate z-scores for the selected features
z_scores = data_filtered.apply(zscore)

# print(z_scores)

# Add the packageName to the z_scores dataframe for grouping in the plots
z_scores['uid'] = data['uid']

# print(z_scores)

# Melt the dataframe for easier plotting with seaborn
z_scores_melted = z_scores.melt(id_vars=['uid'], var_name='Feature', value_name='Z-Score')

# print(z_scores_melted)
# Bar plot of z-scores with respect to each packageName
plt.figure(figsize=(14, 8))
sns.barplot(x='uid', y='Z-Score', hue='Feature', data=z_scores_melted, errorbar=None)
plt.axhline(y=2, color='r', linestyle='--', label='Threshold')
plt.axhline(y=-2, color='r', linestyle='--')
plt.title('Z-Scores of Recently used time by Package Name (Threshold = 2)')
plt.xticks(rotation=270)
plt.legend(loc='upper right')
plt.show()


#------------------------ This is plot 2--------------------------------------------------------

# Z-scores for sensor count data
# Select relevant columns for analysis

columns_to_analyze = ['totalUsage', 'totalUsageDaily', 'totalUsageDaily']
data_filtered = data[columns_to_analyze].copy()

# Calculate z-scores for the selected features
z_scores = data_filtered.apply(zscore)

# print(z_scores)

# Add the packageName to the z_scores dataframe for grouping in the plots
z_scores['uid'] = data['uid']

# print(z_scores)

# Melt the dataframe for easier plotting with seaborn
z_scores_melted = z_scores.melt(id_vars=['uid'], var_name='Feature', value_name='Z-Score')

# print(z_scores_melted)
# Bar plot of z-scores with respect to each packageName
plt.figure(figsize=(14, 8))
sns.barplot(x='uid', y='Z-Score', hue='Feature', data=z_scores_melted, errorbar=None)
plt.axhline(y=2, color='r', linestyle='--', label='Threshold')
plt.axhline(y=-2, color='r', linestyle='--')
plt.title('Z-Scores of Usage Count by Package Name (Threshold = 2)')
plt.xticks(rotation=270)
plt.legend(loc='upper right')
plt.show()


as you see both plots are having same x axis and y axis , now i want to get the plot such that plot 1 vs plot 2 


ans :

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import zscore

# Load the data
file_path = 'path_to_your_file.csv'
data = pd.read_csv(file_path)

# Adding recently used column
data['recentlyUsedTime'] = data['timeStamp'] - data['lastTimeUsed']
columns_to_analyze = ['recentlyUsedTime']
data_filtered = data[columns_to_analyze].copy()

# Calculate z-scores for the selected features
z_scores = data_filtered.apply(zscore)

# Add the uid to the z_scores dataframe for grouping in the plots
z_scores['uid'] = data['uid']

# Melt the dataframe for easier plotting with seaborn
z_scores_melted = z_scores.melt(id_vars=['uid'], var_name='Feature', value_name='Z-Score')

# First combined plot data
data_combined_1 = z_scores_melted.copy()
data_combined_1['Plot'] = 'Recently Used Time'

# Recalculate the second set of z-scores and melt them
columns_to_analyze_2 = ['totalUsage', 'totalUsageDaily', 'totalUsageWeekly', 'accessHours']
data_filtered_2 = data[columns_to_analyze_2].copy()
z_scores_2 = data_filtered_2.apply(zscore)
z_scores_2['uid'] = data['uid']
z_scores_melted_2 = z_scores_2.melt(id_vars=['uid'], var_name='Feature', value_name='Z-Score')
z_scores_melted_2['Plot'] = 'Usage Count'

# Combine both melted dataframes
data_combined = pd.concat([data_combined_1, z_scores_melted_2])

# Combined plot without black lines on bars
plt.figure(figsize=(14, 8))
sns.barplot(x='uid', y='Z-Score', hue='Feature', data=data_combined, edgecolor=None)
plt.axhline(y=2, color='r', linestyle='--', label='Threshold')
plt.axhline(y=-2, color='r', linestyle='--')
plt.title('Combined Z-Scores by UID (Threshold = 2)')
plt.xticks(rotation=270)
plt.legend(loc='upper right')
plt.show()





;;;;;

<!-- res/layout/activity_main.xml -->
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <!-- Label and Info Icon -->
    <LinearLayout
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:gravity="center_vertical"
        android:layout_marginBottom="16dp">

        <!-- TextView for the label -->
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Accuracy"
            android:textSize="16sp"
            android:textStyle="bold"
            android:layout_marginEnd="8dp" />

        <!-- ImageView for the info icon -->
        <ImageView
            android:layout_width="20dp"
            android:layout_height="20dp"
            android:src="@drawable/ic_info" <!-- Replace with your icon -->
            android:contentDescription="Info Icon" />

    </LinearLayout>

    <!-- Custom SeekBar with steps from 1 to 5 -->
    <SeekBar
        android:id="@+id/seekBar_accuracy"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:max="4" <!-- Set max to 4 since steps will be 0 to 4 -->
        android:progressDrawable="@drawable/custom_seekbar_progress"
        android:thumb="@drawable/custom_thumb"
        android:layout_marginBottom="8dp" />

    <!-- Number indicators below the SeekBar -->
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:weightSum="5"
        android:gravity="center">

        <!-- Create TextViews for each step indicator -->
        <TextView
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="1"
            android:gravity="center" />

        <TextView
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="2"
            android:gravity="center" />

        <TextView
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="3"
            android:gravity="center" />

        <TextView
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="4"
            android:gravity="center" />

        <TextView
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="5"
            android:gravity="center" />
    </LinearLayout>

</LinearLayout>




<!-- res/drawable/custom_seekbar_progress.xml -->
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- Background of the SeekBar -->
    <item android:id="@android:id/background">
        <shape>
            <corners android:radius="5dp" />
            <solid android:color="#FFCCCCCC" /> <!-- Light grey background -->
        </shape>
    </item>

    <!-- Progress bar filled area -->
    <item android:id="@android:id/progress">
        <clip>
            <shape>
                <corners android:radius="5dp" />
                <solid android:color="#FF6200EE" /> <!-- Primary color for progress -->
            </shape>
        </clip>
    </item>
</layer-list>









<!-- res/drawable/custom_thumb.xml -->
<shape xmlns:android="http://schemas.android.com/apk/res/android">
    <size
        android:width="24dp"
        android:height="24dp" />
    <solid android:color="#FF6200EE" /> <!-- Primary color for the thumb -->
    <corners android:radius="12dp" /> <!-- Circular shape -->
    <stroke
        android:width="2dp"
        android:color="#FFFFFFFF" /> <!-- White border around the thumb -->
</shape>




// MainActivity.java
import android.os.Bundle;
import android.widget.SeekBar;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private SeekBar seekBarAccuracy;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Initialize the SeekBar
        seekBarAccuracy = findViewById(R.id.seekBar_accuracy);

        // Set a listener to capture SeekBar changes
        seekBarAccuracy.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                int rating = progress + 1; // Since progress starts from 0
                Toast.makeText(MainActivity.this, "Selected Accuracy Level: " + rating, Toast.LENGTH_SHORT).show();
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {
                // Optional: Implement if needed
            }

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {
                // Optional: Implement if needed
            }
        });
    }
}
